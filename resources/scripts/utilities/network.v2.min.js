export const Network={sendGET:options=>new Promise((resolve,reject)=>{try{if(null==options)throw Error("No options received");if(null==options.endpoint)throw Error("No endpoint defined");if("string"!=typeof options.endpoint)throw Error("Endpoint must be a string");let obj=new XMLHttpRequest,json=null!=options.json&&options.json;obj.addEventListener("readystatechange",event=>Network.validate(event.target,json,resolve,reject)),obj.open("GET",options.endpoint),obj.send()}catch(ex){reject(Error(ex.message))}}),sendPOST:options=>new Promise((resolve,reject)=>{try{if(null==options)throw Error("No options received");if(null==options.endpoint)throw Error("No endpoint defined");if("string"!=typeof options.endpoint)throw Error("Endpoint must be a string");if(null==options.data&&null==options.form)throw Error("You must define data or form on options");if(null!=options.data&&"object"!=typeof options.data)throw Error("data must be an object");if(null!=options.form&&!(options.form instanceof HTMLFormElement))throw Error("form must be an HTMLFormElement");let obj=new XMLHttpRequest,json=null!=options.json&&options.json,fd=null!=options.form?new FormData(options.form):new FormData;if(null!=options.data&&null==options.form){let keys=Object.keys(options.data);for(let k of keys)fd.append(k,options.data[k])}obj.addEventListener("readystatechange",event=>Network.validate(event.target,json,resolve,reject)),obj.open("POST",options.endpoint),obj.send(fd)}catch(ex){reject(Error(ex.message))}}),validate:(target,json,resolve,reject)=>{if(4==target.readyState&&200!=target.status)reject(Error(`Error ${target.status}: ${target.statusText}`));else if(4!=target.readyState||json){if(4==target.readyState)try{resolve(JSON.parse(target.responseText))}catch{reject(Error(`El response no se puede parsear. Response:\r\n${target.responseText}`))}}else resolve(target.responseText)}};